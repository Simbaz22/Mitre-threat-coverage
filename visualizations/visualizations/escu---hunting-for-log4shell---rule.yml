title: ESCU - Hunting for Log4Shell - Rule
description: "The following hunting query assists with quickly assessing CVE-2021-44228,\
  \ or Log4Shell, activity mapped to the Web Datamodel. This is a combination query\
  \ attempting to identify, score and dashboard. Because the Log4Shell vulnerability\
  \ requires the string to be in the logs, this will work to identify the activity\
  \ anywhere in the HTTP headers using _raw. Modify the first line to use the same\
  \ pattern matching against other log sources. Scoring is based on a simple rubric\
  \ of 0-5. 5 being the best match, and less than 5 meant to identify additional patterns\
  \ that will equate to a higher total score. \nThe first jndi match identifies the\
  \ standard pattern of `{jndi:` \njndi_fastmatch is meant to identify any jndi in\
  \ the logs. The score is set low and is meant to be the \"base\" score used later.\
  \ \njndi_proto is a protocol match that identifies `jndi` and one of `ldap, ldaps,\
  \ rmi, dns, nis, iiop, corba, nds, http, https.` \nall_match is a very well written\
  \ regex by https://gist.github.com/Schvenn that identifies nearly all patterns of\
  \ this attack behavior. \nenv works to identify environment variables in the header,\
  \ meant to capture `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY` and `env`. \nuri_detect\
  \ is string match looking for the common uri paths currently being scanned/abused\
  \ in the wild. \nkeywords matches on enumerated values that, like `$ctx:loginId`,\
  \ that may be found in the header used by the adversary. \nlookup matching is meant\
  \ to catch some basic obfuscation that has been identified using upper, lower and\
  \ date. \nScoring will then occur based on any findings. The base score is meant\
  \ to be 2 , created by jndi_fastmatch. Everything else is meant to increase that\
  \ score. \nFinally, a simple table is created to show the scoring and the _raw field.\
  \ Sort based on score or columns of interest."
status: Inactive
author: DS
logsource:
  product: Splunk
  service: splunkd
  category: Firewall
detection:
  condition:
    sigma: "\n  -  from datamodel Web.Web \n  -  eval jndi=if(match(_raw, \"(\\{\n\
      \  - %7B)[jJnNdDiI]{4}:\"),4,0) \n  -  eval jndi_fastmatch=if(match(_raw, \"\
      [jJnNdDiI]{4}\"),2,0) \n  -  eval jndi_proto=if(match(_raw,\"(?i)jndi:(ldap[s]?\n\
      \  - rmi\n  - dns\n  - nis\n  - iiop\n  - corba\n  - nds\n  - http\n  - https):\"\
      ),5,0) \n  -  eval all_match = if(match(_raw, \"(?i)(%(25){0,}20\n  - \\s)*(%(25){0,}24\n\
      \  - \\$)(%(25){0,}20\n  - \\s)*(%(25){0,}7B\n  - {)(%(25){0,}20\n  - \\s)*(%(25){0,}(6A\n\
      \  - 4A)\n  - J)(%(25){0,}(6E\n  - 4E)\n  - N)(%(25){0,}(64\n  - 44)\n  - D)(%(25){0,}(69\n\
      \  - 49)\n  - I)(%(25){0,}20\n  - \\s)*(%(25){0,}3A\n  - :)[\\w\\%]+(%(25){1,}3A\n\
      \  - :)(%(25){1,}2F\n  - \\/)[^\\n]+\"),5,0) \n  -  eval env_var = if(match(_raw,\
      \ \"env:\") OR match(_raw, \"env:AWS_ACCESS_KEY_ID\") OR match(_raw, \"env:AWS_SECRET_ACCESS_KEY\"\
      ),5,0) \n  -  eval uridetect = if(match(_raw, \"(?i)Basic\\/Command\\/Base64\n\
      \  - Basic\\/ReverseShell\n  - Basic\\/TomcatMemshell\n  - Basic\\/JBossMemshell\n\
      \  - Basic\\/WebsphereMemshell\n  - Basic\\/SpringMemshell\n  - Basic\\/Command\n\
      \  - Deserialization\\/CommonsCollectionsK\n  - Deserialization\\/CommonsBeanutils\n\
      \  - Deserialization\\/Jre8u20\\/TomcatMemshell\n  - Deserialization\\/CVE_2020_2555\\\
      /WeblogicMemshell\n  - TomcatBypass\n  - GroovyBypass\n  - WebsphereBypass\"\
      ),4,0) \n  -  eval keywords = if(match(_raw,\"(?i)\\$\\{ctx\\:loginId\\}\n \
      \ - \\$\\{map\\:type\\}\n  - \\$\\{filename\\}\n  - \\$\\{date\\:MM-dd-yyyy\\\
      }\n  - \\$\\{docker\\:containerId\\}\n  - \\$\\{docker\\:containerName\\}\n\
      \  - \\$\\{docker\\:imageName\\}\n  - \\$\\{env\\:USER\\}\n  - \\$\\{event\\\
      :Marker\\}\n  - \\$\\{mdc\\:UserId\\}\n  - \\$\\{java\\:runtime\\}\n  - \\$\\\
      {java\\:vm\\}\n  - \\$\\{java\\:os\\}\n  - \\$\\{jndi\\:logging/context-name\\\
      }\n  - \\$\\{hostName\\}\n  - \\$\\{docker\\:containerId\\}\n  - \\$\\{k8s\\\
      :accountName\\}\n  - \\$\\{k8s\\:clusterName\\}\n  - \\$\\{k8s\\:containerId\\\
      }\n  - \\$\\{k8s\\:containerName\\}\n  - \\$\\{k8s\\:host\\}\n  - \\$\\{k8s\\\
      :labels.app\\}\n  - \\$\\{k8s\\:labels.podTemplateHash\\}\n  - \\$\\{k8s\\:masterUrl\\\
      }\n  - \\$\\{k8s\\:namespaceId\\}\n  - \\$\\{k8s\\:namespaceName\\}\n  - \\\
      $\\{k8s\\:podId\\}\n  - \\$\\{k8s\\:podIp\\}\n  - \\$\\{k8s\\:podName\\}\n \
      \ - \\$\\{k8s\\:imageId\\}\n  - \\$\\{k8s\\:imageName\\}\n  - \\$\\{log4j\\\
      :configLocation\\}\n  - \\$\\{log4j\\:configParentLocation\\}\n  - \\$\\{spring\\\
      :spring.application.name\\}\n  - \\$\\{main\\:myString\\}\n  - \\$\\{main\\\
      :0\\}\n  - \\$\\{main\\:1\\}\n  - \\$\\{main\\:2\\}\n  - \\$\\{main\\:3\\}\n\
      \  - \\$\\{main\\:4\\}\n  - \\$\\{main\\:bar\\}\n  - \\$\\{name\\}\n  - \\$\\\
      {marker\\}\n  - \\$\\{marker\\:name\\}\n  - \\$\\{spring\\:profiles.active[0]\n\
      \  - \\$\\{sys\\:logPath\\}\n  - \\$\\{web\\:rootDir\\}\n  - \\$\\{sys\\:user.name\\\
      }\"),4,0) \n  -  eval obf = if(match(_raw, \"(\\$\n  - %24)[^ /]*({\n  - %7b)[^\
      \ /]*(j\n  - %6a)[^ /]*(n\n  - %6e)[^ /]*(d\n  - %64)[^ /]*(i\n  - %69)[^ /]*(:\n\
      \  - %3a)[^ /]*(:\n  - %3a)[^ /]*(/\n  - %2f)\"),5,0) \n  -  eval lookups =\
      \ if(match(_raw, \"(?i)({\n  - %7b)(main\n  - sys\n  - k8s\n  - spring\n  -\
      \ lower\n  - upper\n  - env\n  - date\n  - sd)\"),4,0)  \n  -  addtotals fieldname=Score,\
      \ jndi, jndi_proto, env_var, uridetect, all_match, jndi_fastmatch, keywords,\
      \ obf, lookups \n  -  where Score > 2 \n  -  stats values(Score) by  jndi, jndi_proto,\
      \ env_var, uridetect, all_match, jndi_fastmatch, keywords, lookups, obf, _raw\
      \ \n  -  `hunting_for_log4shell_filter`"
  level: critical
tags:
- T1190
- Exploit Public-Facing Application
- Initial Access
references: .nan
notes: Activity already covered by network rules.
